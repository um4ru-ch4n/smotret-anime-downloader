import os
import re
import time
import requests
import csv
import json

from requests.exceptions import ReadTimeout, ConnectionError
from http.client import IncompleteRead
from concurrent.futures import ThreadPoolExecutor
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from tqdm import tqdm


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LOGIN_URL = "https://smotret-anime.online/users/login"  # login URL
LOGIN = ""  # your login for authorization
PASSWORD = ""    # your password
ANIME_URL = "https://smotret-anime.online/catalog/naruto-shippuuden-4530/128-seriya-91114/russkie-subtitry-732269"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–∏—é –∞–Ω–∏–º–µ –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–∫–∞—á–∏–≤–∞—Ç—å
DOWNLOAD_DIR = "downloads"  # –ü–∞–ø–∫–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –∫–∞—á–∞—Ç—å—Å—è —Ñ–∞–π–ª—ã
CHROMEDRIVER_PATH = "./chromedriver.exe"  # –ü—É—Ç—å –∫ chromedriver
TRANSLATION_TYPE = "–†—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã"  # –ü—Ä–∏–º–µ—Ä: Raw, –Ø–ø–æ–Ω—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã, –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã, –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞, –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞, –†—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –∏–ª–∏ –û–∑–≤—É—á–∫–∞
TRANSLATION_VARIANTS = ["yakusub studio", "yakusub studio (bd)", "Bokusatsu Shiden Team"]  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –æ–∑–≤—É—á–µ–∫/—Å—É–±—Ç–∏—Ç—Ä–æ–≤

MAX_CONCURRENT_DOWNLOADS = 5    # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5

# === Selenium Setup ===
options = Options()
options.add_experimental_option("prefs", {
    "download.default_directory": os.path.abspath(DOWNLOAD_DIR),
    "download.prompt_for_download": False,
    "directory_upgrade": True,
    "safebrowsing.enabled": True
})

options.add_argument("--headless=new")  # –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–∞–∂–∏–º–∞—é—Ç—Å—è
service = Service(executable_path=CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)
wait = WebDriverWait(driver, 20)

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
def login():
    driver.get(LOGIN_URL)
    wait.until(EC.presence_of_element_located((By.NAME, "LoginForm[username]"))).send_keys(LOGIN)
    driver.find_element(By.NAME, "LoginForm[password]").send_keys(PASSWORD)
    login_btn = driver.find_element(By.XPATH, "//button[normalize-space(text())='–í–æ–π—Ç–∏']")
    login_btn.click()

# === –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ ===
def get_anime_title():
    h2 = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "h2.line-1 a")))
    return re.sub(r'[\\/*?:"<>|]', "", h2.text)

# === –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞ ===
def get_current_episode_number():
    prev_num, next_num = None, None

    try:
        prev_btn = driver.find_element(By.CSS_SELECTOR, "div.m-select-sibling-episode a i.left")
        prev_text = prev_btn.find_element(By.XPATH, "..").text.strip()
        prev_num = int(re.search(r'\d+', prev_text).group()) if prev_text else None
    except:
        pass

    try:
        next_btn = driver.find_element(By.CSS_SELECTOR, "div.m-select-sibling-episode a i.right")
        next_text = next_btn.find_element(By.XPATH, "..").text.strip()
        next_num = int(re.search(r'\d+', next_text).group()) if next_text else None
    except:
        pass

    if prev_num is not None and next_num is not None:
        return (prev_num + next_num) // 2
    elif next_num is not None:
        return next_num - 1
    elif prev_num is not None:
        return prev_num + 1
    else:
        return 1


# === –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Ä–∏–∏ ===
def go_to_next_episode():
    try:
        current_url = driver.current_url

        next_btn = driver.find_element(By.CSS_SELECTOR, "div.m-select-sibling-episode a i.right")
        next_btn.find_element(By.XPATH, "..").click()

        # –ñ–¥—ë–º –ø–æ–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è URL
        WebDriverWait(driver, 10).until(EC.url_changes(current_url))

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, —á—Ç–æ –≤—Å—ë –ø—Ä–æ–≥—Ä—É–∑–∏–ª–æ—Å—å
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "m-translation-view-download"))
        )
        
        return True
    except:
        return False


def select_translation(driver, wait):
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (RAW, –°—É–±—Ç–∏—Ç—Ä—ã, –û–∑–≤—É—á–∫–∞ –∏ —Ç.–ø.)
    try:
        type_container = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "m-select-translation-type")))
        type_links = type_container.find_elements(By.TAG_NAME, "a")
        desired_type = TRANSLATION_TYPE.strip().lower()

        for link in type_links:
            link_text = link.text.strip().lower()
            if link_text == desired_type and "active" not in link.get_attribute("class"):
                print(f"üéõ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞: {TRANSLATION_TYPE}")
                link.click()
                time.sleep(1)
                break
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

    # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)
    try:
        variant_container = driver.find_element(By.CLASS_NAME, "m-select-translation-variant")
        variant_links = variant_container.find_elements(By.TAG_NAME, "a")

        found_any = False

        for preferred in TRANSLATION_VARIANTS:
            desired_variant = preferred.strip().lower()
            for link in variant_links:
                link_text = link.text.strip().lower()
                if desired_variant in link_text:
                    found_any = True
                    if "current" not in link.get_attribute("class"):
                        print(f"üéõ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞: {link.text.strip()}")
                        link.click()
                        time.sleep(1)
                    else:
                        print(f"üéß –í–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω: {link.text.strip()}")
                    return  # –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

        if not found_any:
            print("‚ÑπÔ∏è –ù–∏ –æ–¥–∏–Ω –∂–µ–ª–∞–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    except Exception:
        print("‚ÑπÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")


# === –°–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Å–µ—Ä–∏–∏ ===
def extract_download_links():
    links = []

    while True:
        episode_num = get_current_episode_number()

        # ‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        select_translation(driver, wait)

        video_link = None
        subs_link = None

        try:
            container = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "m-translation-view-download")))
            for quality in ["–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (1080p)", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (720p)", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (536p)", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (406p)", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (360p)", "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (356p)"]:
                try:
                    el = container.find_element(By.XPATH, f".//a[normalize-space(text())='{quality}']")
                    video_link = el.get_attribute("href")
                    if video_link:
                        break
                except:
                    continue
        except:
            pass

        try:
            subs_el = driver.find_element(By.XPATH, "//a[normalize-space(text())='–°–∫–∞—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã']")
            subs_link = subs_el.get_attribute("href")
        except:
            pass

        links.append({
            "episode": episode_num,
            "video_url": video_link,
            "subs_url": subs_link
        })

        print(f"üîó –°–µ—Ä–∏—è {episode_num}: —Å—Å—ã–ª–∫–∏ —Å–æ–±—Ä–∞–Ω—ã")

        if not go_to_next_episode():
            break
        time.sleep(3)

    return links


def format_size(size_bytes):
    if size_bytes == 0:
        return "0B"
    size_name = ("B", "KB", "MB", "GB", "TB")
    i = 0
    p = 1024
    size = float(size_bytes)
    while size >= p and i < len(size_name) - 1:
        size /= p
        i += 1
    return f"{size:.2f} {size_name[i]}"


def is_file_valid(url, filename, cookies):
    if not os.path.exists(filename):
        return False

    try:
        with requests.get(url, cookies=cookies, stream=True, timeout=2) as r:
            r.raise_for_status()
            content_length = int(r.headers.get('Content-Length', 0))
            if content_length == 0:
                print(f"‚ö†Ô∏è Content-Length –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {filename}")
                return False
            file_size = os.path.getsize(filename)
            if file_size == content_length:
                return True
            else:
                print(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {format_size(file_size)} != {format_size(content_length)}")
                return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False


def download_file(url, filename, cookies, retries=3):
    if is_file_valid(url, filename, cookies):
        print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ñ–∞–π–ª —Ü–µ–ª—ã–π): {filename}")
        return

    for attempt in range(1, retries + 1):
        try:
            with requests.get(url, cookies=cookies, stream=True, timeout=(10, 120)) as r:
                r.raise_for_status()
                total_size = int(r.headers.get('Content-Length', 0))
                block_size = 8192
                progress = tqdm(
                    total=total_size,
                    unit='B',
                    unit_scale=True,
                    unit_divisor=1024,
                    desc=os.path.basename(filename),
                    leave=False
                )
                with open(filename, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=block_size):
                        if chunk:
                            f.write(chunk)
                            progress.update(len(chunk))
                progress.close()
            print(f"‚úÖ –°–∫–∞—á–∞–Ω: {filename}")
            return
        except (IncompleteRead, ReadTimeout, ConnectionError) as e:
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
            time.sleep(2)
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
            break
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {filename} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")


def save_episode_data(anime_folder, episodes, cookies):
    csv_path = os.path.join(anime_folder, "episodes.csv")
    json_path = os.path.join(anime_folder, "cookies.json")

    with open(csv_path, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["episode", "video_url", "subs_url"])
        writer.writeheader()
        for ep in episodes:
            writer.writerow(ep)

    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(cookies, f)

    print(f"üíæ –°—Å—ã–ª–∫–∏ –∏ –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_path}, {json_path}")


def load_episode_data(anime_folder):
    csv_path = os.path.join(anime_folder, "episodes.csv")
    json_path = os.path.join(anime_folder, "cookies.json")

    episodes = []
    if os.path.exists(csv_path) and os.path.exists(json_path):
        with open(csv_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                episodes.append({
                    "episode": int(row["episode"]),
                    "video_url": row["video_url"] or None,
                    "subs_url": row["subs_url"] or None
                })

        with open(json_path, "r", encoding="utf-8") as f:
            cookies = json.load(f)

        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∏–∑ –∫—ç—à–∞: {csv_path}")
        return episodes, cookies
    else:
        return None, None



# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    login()
    time.sleep(3)

    driver.get(ANIME_URL)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
    anime_title = get_anime_title()
    anime_folder = os.path.join(DOWNLOAD_DIR, anime_title)
    os.makedirs(anime_folder, exist_ok=True)
    print(f"\nüìÇ –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–ø–∫—É: {anime_folder}")

    episodes, cookies = load_episode_data(anime_folder)

    if not episodes:
        episodes = extract_download_links()
        cookies = {c['name']: c['value'] for c in driver.get_cookies()}
        save_episode_data(anime_folder, episodes, cookies)
        driver.quit()
    else:
        driver.quit()
        print(f"üîÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî –≤—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

    with ThreadPoolExecutor(max_workers=MAX_CONCURRENT_DOWNLOADS) as executor:
        for ep in episodes:
            ep_num = ep["episode"]

            if ep["video_url"]:
                ext = re.search(r'/translations/([^/]+)/', ep["video_url"]).group(1)
                filename = os.path.join(anime_folder, f"episode_{ep_num:02d}.{ext}")
                executor.submit(download_file, ep["video_url"], filename, cookies)

            if ep["subs_url"]:
                ext = re.search(r'/translations/([^/]+)/', ep["subs_url"]).group(1)
                filename = os.path.join(anime_folder, f"episode_{ep_num:02d}.{ext}")
                executor.submit(download_file, ep["subs_url"], filename, cookies)

if __name__ == "__main__":
    main()
